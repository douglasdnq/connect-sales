// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/(dashboard)/customers/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/customers/page.js")
  handler satisfies AppPageConfig<"/customers">
}

// Validate ../../src/app/(dashboard)/dashboard/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../src/app/(dashboard)/errors/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/errors/page.js")
  handler satisfies AppPageConfig<"/errors">
}

// Validate ../../src/app/(dashboard)/events/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/events/page.js")
  handler satisfies AppPageConfig<"/events">
}

// Validate ../../src/app/(dashboard)/goals/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/goals/page.js")
  handler satisfies AppPageConfig<"/goals">
}

// Validate ../../src/app/(dashboard)/leads/import/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/leads/import/page.js")
  handler satisfies AppPageConfig<"/leads/import">
}

// Validate ../../src/app/(dashboard)/leads/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/leads/page.js")
  handler satisfies AppPageConfig<"/leads">
}

// Validate ../../src/app/(dashboard)/orders/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/orders/page.js")
  handler satisfies AppPageConfig<"/orders">
}

// Validate ../../src/app/(dashboard)/settings/page.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../src/app/auth/login/page.tsx
{
  const handler = {} as typeof import("../../src/app/auth/login/page.js")
  handler satisfies AppPageConfig<"/auth/login">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/api/bulk-delete/route.ts
{
  const handler = {} as typeof import("../../src/app/api/bulk-delete/route.js")
  handler satisfies RouteHandlerConfig<"/api/bulk-delete">
}

// Validate ../../src/app/api/fix-rls/route.ts
{
  const handler = {} as typeof import("../../src/app/api/fix-rls/route.js")
  handler satisfies RouteHandlerConfig<"/api/fix-rls">
}

// Validate ../../src/app/api/import-csv/route.ts
{
  const handler = {} as typeof import("../../src/app/api/import-csv/route.js")
  handler satisfies RouteHandlerConfig<"/api/import-csv">
}

// Validate ../../src/app/api/import-leads-sheets/route.ts
{
  const handler = {} as typeof import("../../src/app/api/import-leads-sheets/route.js")
  handler satisfies RouteHandlerConfig<"/api/import-leads-sheets">
}

// Validate ../../src/app/api/leads/route.ts
{
  const handler = {} as typeof import("../../src/app/api/leads/route.js")
  handler satisfies RouteHandlerConfig<"/api/leads">
}

// Validate ../../src/app/api/migrate/route.ts
{
  const handler = {} as typeof import("../../src/app/api/migrate/route.js")
  handler satisfies RouteHandlerConfig<"/api/migrate">
}





// Validate ../../src/app/(dashboard)/layout.tsx
{
  const handler = {} as typeof import("../../src/app/(dashboard)/layout.js")
  handler satisfies LayoutConfig<"/">
}

// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
